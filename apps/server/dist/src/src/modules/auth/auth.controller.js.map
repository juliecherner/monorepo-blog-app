{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../../../src/modules/auth/auth.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAQwB;AACxB,iDAA6C;AAC7C,yDAAoD;AACpD,+DAA0D;AAE1D,6CAAyD;AAEzD,+DAAkD;AAClD,6CAAyC;AAIlC,IAAM,cAAc,4BAApB,MAAM,cAAc;IACzB,YAA6B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAKnD,AAAN,KAAK,CAAC,EAAE,CAAY,OAAe,EAAe,SAAqB;QACrE,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAE9C,CAAC;IAGK,AAAN,KAAK,CAAC,QAAQ,CAAS,OAAwB;QAC7C,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAGK,AAAN,KAAK,CAAC,KAAK,CAAS,OAAqB;QACvC,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF,CAAA;AAdO;IAHL,IAAA,YAAG,EAAC,KAAK,CAAC;IACV,IAAA,uBAAa,EAAC,SAAS,CAAC;IACxB,IAAA,kBAAS,EAAC,sBAAS,CAAC;IACX,WAAA,IAAA,gBAAO,GAAE,CAAA;IAAmB,WAAA,IAAA,+BAAS,GAAE,CAAA;;;;wCAGhD;AAGK;IADL,IAAA,aAAI,EAAC,UAAU,CAAC;IACD,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAU,mCAAe;;8CAE9C;AAGK;IADL,IAAA,aAAI,EAAC,OAAO,CAAC;IACD,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAU,6BAAY;;2CAExC;yBAnBU,cAAc;IAF1B,IAAA,iBAAO,EAAC,aAAa,CAAC;IACtB,IAAA,mBAAU,EAAC,MAAM,CAAC;qCAEyB,0BAAW;GAD1C,cAAc,CAoB1B","sourcesContent":["import {\n  Controller,\n  Get,\n  Request,\n  Body,\n  Post,\n  Headers,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthLoginDto } from './dto/auth-login.dto';\nimport { AuthRegisterDto } from './dto/auth-register.dto';\n\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { JwtPayload } from 'types';\nimport { Requestor } from './requestor.decorator';\nimport { AuthGuard } from './auth.guard';\n\n@ApiTags('Auth routes')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get('/me')\n  @ApiBearerAuth('default')\n  @UseGuards(AuthGuard)\n  async me(@Headers() headers: string, @Requestor() requestor: JwtPayload) {\n    return await this.authService.me(requestor);\n    //return requestor;\n  }\n\n  @Post('register')\n  async register(@Body() authDto: AuthRegisterDto) {\n    return await this.authService.register(authDto);\n  }\n\n  @Post('login')\n  async login(@Body() authDto: AuthLoginDto) {\n    return await this.authService.login(authDto);\n  }\n}\n"]}