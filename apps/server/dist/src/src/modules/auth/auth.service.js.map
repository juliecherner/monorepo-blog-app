{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../../src/modules/auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,+CAAiC;AACjC,qCAAyC;AACzC,uDAAmD;AAMnD,MAAM,YAAY,GAAG,EAAE,CAAC;AAEjB,IAAM,WAAW,yBAAjB,MAAM,WAAW;IACtB,YACmB,WAAwB,EACxB,UAAsB;QADtB,gBAAW,GAAX,WAAW,CAAa;QACxB,eAAU,GAAV,UAAU,CAAY;IACtC,CAAC;IAEJ,KAAK,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAmB;QAC1D,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACjE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACzC,QAAQ;YACR,QAAQ,EAAE,cAAc;YACxB,IAAI;SACL,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAgB;QAC9C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,8BAAqB,CAAC,kBAAkB,CAAC,CAAC;SACrD;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACrC;QACD,MAAM,OAAO,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC;QAC5C,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;SAC5C,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,EAAE,CAAC,IAAgB;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC;QACzB,OAAO;YACL,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;IACJ,CAAC;CACF,CAAA;sBAzCY,WAAW;IADvB,IAAA,mBAAU,GAAE;qCAGqB,0BAAW;QACZ,gBAAU;GAH9B,WAAW,CAyCvB","sourcesContent":["import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../user/user.service';\nimport { AuthLoginDto } from './dto/auth-login.dto';\nimport { AuthRegisterDto } from './dto/auth-register.dto';\nimport { JwtPayload } from 'types';\n\n\nconst saltOrRounds = 10;\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register({ username, password, role }: AuthRegisterDto) {\n    const hashedPassword = await bcrypt.hash(password, saltOrRounds);\n    const user = await this.userService.create({\n      username,\n      password: hashedPassword,\n      role\n    });\n    return user;\n  }\n\n  async login({ username, password }: AuthLoginDto) {\n    const users = await this.userService.find({ username });\n\n    if (!users) {\n      throw new UnauthorizedException('Invalid username');\n    }\n    const user = users[0];\n    const isPasswordValid = await bcrypt.compare(password, user?.password);\n    if (!isPasswordValid) {\n      throw new Error('Invalid password');\n    }\n    const payload = { _id: user._id, username };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async me(user: JwtPayload) {\n    const dbUser = await this.userService.findOne(user._id);\n    if (!dbUser) return null;\n    return {\n      _id: dbUser._id,\n      username: dbUser.username\n    }; \n  }\n}\n"]}